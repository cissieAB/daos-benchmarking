#!/bin/bash

#PBS -A e2sar-daos
#PBS -l select=1
#PBS -l walltime=0:30:00
#PBS -q debug
#PBS -l filesystems=home:flare:daos_user_fs
#PBS -j oe

set -e  # Exit on any error

# Variables
POOL_NAME=e2sar
CONTAINER_BASE_NAME="${USER}-fio_test-m"
RESULTS_DIR="./fio_results_missed_$(date +%Y-%m-%d_%H-%M-%S)"
LOG_FILE="$RESULTS_DIR/logs.txt"

NUMA_CPU_CORES=4,9,14,19,20,25,56,61,66,71,74,79


CASES=('--rw=write --unified_rw_reporting=0 --bs=2M --numjobs=128 --iodepth=64' '--rw=randrw   --rwmixread=20  --unified_rw_reporting=1 --bs=2M --numjobs=128 --iodepth=32')
CASE_IDS=(['SeqW-2M-128-64' 'RandWH-2M-128-32')

START_TIME=$SECONDS

error() {
    echo  "[ERROR] $1" >> $LOG_FILE
}

success() {
    echo "[SUCCESS] $1" >> $LOG_FILE
}

warning() {
    echo "[WARNING] $1" >> $LOG_FILE
}

# Cleanup function
cleanup() {
    local pool_name="$1"
    local container_name="$2"
    mount_point=/tmp/"$pool_name"/"$container_name"
    
    # Remove mounting point on a compute node
    # clean-dfuse.sh $pool_name:$container_name || warning "clean-dfuse.sh failed"
    fusermount3 -u "$mount_point" || warning "Failed to unmount $mount_point"
    sleep 2
    
    # Remove mount point
    if [ -d "$mount_point" ]; then
	rmdir "$mount_point" || warning "Failed to remove directory $mount_point"
    fi

    # Destroy container
    daos container destroy "$pool_name" "$container_name" || warning "Failed to destroy container $container_name"
    
    # Output log of existing pools
    daos container list "$pool_name" >> $LOG_FILE
}

# Create results directory.
# On compute node, this will be in /$HOME
mkdir -p $RESULTS_DIR

# Load DAOS module
module use /soft/modulefiles/ || { error "Failed to use modulefiles"; exit 1; }
module load daos || { error "Failed to load DAOS module"; exit 1; }

# Verify pool exists
daos pool list | grep -q -- "$POOL_NAME" || { error "No pool: $POOL_NAME"; exit 1; }


for i in "${!CASES[@]}"; do
    START_CASE=$SECONDS
    CASE_ID="${CASE_IDS[i]}"
    TEST_CASE="${CASES[i]}"
    CONTAINER_NAME="${CONTAINER_BASE_NAME}_${CASE_ID}"
    MOUNT_POINT="/tmp/$POOL_NAME/$CONTAINER_NAME"
    
    # Create container
    if ! daos container create --type=POSIX "$POOL_NAME" "$CONTAINER_NAME" --properties=rd_fac:1; then
        error "Failed to create container $CONTAINER_NAME"
        continue
    fi
    
    # Mount container to /tmp/$POOL_NAME/$CONTAINER_NAME (system default)
    launch-dfuse.sh "$POOL_NAME:$CONTAINER_NAME"

    # Build FIO command
    fio_cmd=" taskset -c $NUMA_CPU_CORES fio "
    fio_cmd+=" --output=${RESULTS_DIR}/fio_${CASE_ID}.json"
    fio_cmd+=" --output-format=json"
    fio_cmd+=" --warnings-fatal"
    fio_cmd+=" --name=${CASE_ID}"
    fio_cmd+=" ${TEST_CASE}"
    fio_cmd+=" --runtime=60 --time_based"
    fio_cmd+=" --directory=${MOUNT_POINT}"
    fio_cmd+=" --direct=1 --buffered=0"
    fio_cmd+=" --randrepeat=0 --norandommap"
    fio_cmd+=" --refill_buffers"
    fio_cmd+=" --size=128M"
    fio_cmd+=" --ioengine=pvsync"
    fio_cmd+=" --group_reporting"
    fio_cmd+=" --lat_percentiles=1"
    # fio_cmd+=" --percentile_list=90:95:99:99.5:99.9"

    ${fio_cmd} || { error "$fio_cmd failed"; exit 1; }
    CASE_TIME=$((SECONDS - START_CASE))
    success "FIO benchmark completed for ${TEST_CASE} in ${CASE_TIME}"
    
    sleep 2

    cleanup "$POOL_NAME" "$CONTAINER_NAME" "$MOUNT_POINT"
    
    success "end of loop"
done

ELAPSED_TIME=$((SECONDS - START_TIME))
success "Completed script in $ELAPSED_TIME seconds"
